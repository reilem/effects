effect Check : int list -> unit

let reverse lst = let rec rev acc = function | [] -> acc | x::xs -> rev (x::acc) xs in rev [] lst
let length lst = let rec len acc = function | [] -> acc | _::xs -> len (acc + 1) xs in len 0 lst
let negate = function | 0 -> -1 | n -> n

let rec find_subarray = function
  | []    -> []
  | x::xs -> perform (Check (x::xs)); find_subarray xs

let array_checker = handler
  | effect (Check sublst) k ->
    let rec sub_search sum acc best = function
      | [] -> reverse best
      | next::rest ->
        let newsum = sum + (negate next) in
        let newacc  = next::acc in
        if newsum = 0 then
          sub_search newsum newacc newacc rest
        else
          sub_search newsum newacc best rest
    in
    let current_best = sub_search 0 [] [] sublst in
    let next_best = k () in
    if length current_best > length next_best then
      current_best
    else
      next_best

let solve lst = with array_checker handle find_subarray lst

(* TIME TESTING CODE *)

let rec generate_array = function
  | 0 -> []
  | n -> perform (Random_int 2) :: (generate_array (n-1))

let timer f gen n m =
  let rec calc_average_time sum = function
  | 0 -> sum /. (float_of_int m)
  | x ->
    let y = gen n in
    let t0 = perform System_time in
    let _ = f y in
    let diff = (perform System_time -. t0) *. 1000.0 in
    calc_average_time (sum +. diff) (x - 1)
  in
  calc_average_time 0.0 m

let timer_loop f start stop avg step =
  let rec looper i =
    if i <= stop then
      print i; print_string ","; print_endline (timer f generate_array i avg);
      looper (i + step)
    else ()
  in
  print_string "n,x\n";
  looper start

let _ = timer_loop solve 10 500 5 10
