external ( = ) : int -> int -> bool = "="
external ( - ) : int -> int -> int = "-"
external ( + ) : int -> int -> int = "+"
type 'a option = None | Some of 'a

effect Put : (int * int) -> unit
effect Get : int -> int option

let rec find n = function
  | []       -> None
  | (v,x)::r -> if n = v then Some x else find n r

let rec fibo_mem = function
  | 0 -> 0 | 1 -> 1 | 2 -> 1
  | n -> match #Get n with
    | Some x -> x
    | None -> let value = fibo_mem (n - 1) + fibo_mem (n - 2) in #Put (n,value); value

let store = handler
  | #Get n k    -> (fun s -> k (find n s) s)
  | #Put tup k  -> (fun s -> k () (tup::s))
  | val x       -> (fun s -> x)

let solve n = (with store handle fibo_mem n) []
