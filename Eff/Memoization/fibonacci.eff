effect Put : (int * int) -> unit
effect Get : int -> int option

let rec find n ((m1, v1), (m2, v2)) =
  if n = m1 then Some v1 else if n = m2 then Some v2 else None
;;

let rec fibo_mem = function
  | n -> match perform (Get n) with
    | Some x -> x
    | None -> let value = fibo_mem (n - 2) + fibo_mem (n - 1) in
        perform (Put (n,value)); value

let store = handler
  | effect (Get n) k    -> (fun s -> k (find n s) s)
  | effect (Put tup) k  -> (fun (_, s) -> k () (s, tup))
  | x                   -> (fun s -> x)

let solve n = (with store handle fibo_mem n) ((0, 0),(1, 1))

(* TIME TESTING CODE *)

let timer f gen n m =
  let rec calc_average_time sum = function
  | 0 -> sum /. (float_of_int m)
  | x ->
    let y = gen n in
    let t0 = perform System_time in
    let _ = f y in
    let diff = (perform System_time -. t0) *. 1000.0 in
    calc_average_time (sum +. diff) (x - 1)
  in
  calc_average_time 0.0 m

let timer_loop f start stop avg step =
  let rec looper i =
    if i <= stop then
      print i; print_string ","; print_endline (timer f (fun n -> n) i avg);
      looper (i + step)
    else ()
  in
  print_string "n,x\n";
  looper start

(* let _ = timer_loop solve 0 2500 20 100 *)
