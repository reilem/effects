effect Fail   : unit -> int
effect Select : unit -> bool

let rec noAttack (i,j) = function
  | [] -> true
  | (k,l)::xs -> i <> k && j <> l && abs (i - k) <> abs (j - l) && noAttack (i,j) xs

let available n x qs =
  let rec checker acc y =
    if y = 0 then acc
    else if noAttack (x, y) qs then checker (y::acc) (y - 1)
    else checker acc (y - 1)
  in
  checker [] n

let rec choose = function
  | []    -> perform Fail
  | x::xs -> if perform Select then x else choose xs

(* NQUEENS *)
let rec queens n =
  let rec put_queen x qns =
    if x > n then qns else
    let next = choose (available n x qns) in
    put_queen (x + 1) ((x,next)::qns)
  in put_queen 1 []

(* SOLVER / HANDLER *)
let selector = handler
  | effect Select k -> k true @ k false
  | effect Fail k   -> []
  | x       -> [x]

let solve n = with selector handle queens n
