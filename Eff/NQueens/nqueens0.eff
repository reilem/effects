external ( <> ) : int -> int -> bool = "<>"
external ( < ) : int -> int -> bool = "<"
external ( > ) : int -> int -> bool = ">"
external ( - ) : int -> int -> int = "-"
external ( + ) : int -> int -> int = "+"
external ( ~- ) : int -> int = "~-"
external ( = ) : int -> int -> bool = "="

effect Fail   : unit -> int
effect Select : unit -> bool

let abs x = if x < 0 then -x else x

let rec (@) xs ys =
  match xs with
  | [] -> ys
  | x :: xs -> x :: (xs @ ys)


let rec noAttack (i,j) = function
  | [] -> true
  | (k,l)::xs -> i <> k && j <> l && (abs (i - k)) <> (abs (j - l)) && noAttack (i,j) xs

let available n x qs =
  let rec checker acc y =
    if y = 0 then acc
    else if noAttack (x, y) qs then checker (y::acc) (y - 1)
    else checker acc (y - 1)
  in
  checker [] n

let rec choose = function
  | []    -> #Fail ()
  | x::xs -> if #Select () then x else choose xs

(* NQUEENS *)
let rec queens n =
  let rec put_queen x qns =
    if x = 0 then qns else
    let next = choose (available n x qns) in
    put_queen (x - 1) ((x,next)::qns)
  in put_queen n []

(* SOLVER / HANDLER *)
let selector = handler
  | #Select _ k -> k true @ k false
  | #Fail   _ _ -> []
  | val x     -> [x]

let solve n = with selector handle queens n
