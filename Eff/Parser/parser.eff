effect True : unit -> unit
effect False : unit -> unit
effect And : unit -> unit
effect Or : unit -> unit
effect Not : unit -> unit
effect L_Br : unit -> unit
effect R_Br : unit -> unit

(* Define custom && and || operations. Eff does not seem to recognize them otherwise. *)
let (||) x y = if x then true else if y then true else false
let (&&) x y = if x then (if y then true else false) else false

type 'a state =
  | State of bool list
  | Resume of bool list * (unit -> 'a state -> a' state)

let error () = failwith "Parse error"

let empty = State []

let append k b = function
  | State s -> k () (State (b::s))
  | _       -> error ()

let resume k = function
  | State s -> Resume (s, k)
  | _       -> error ()

let binary_operation k f = function
  | State [x] -> (match k () empty with
    | State [y]       -> State [f x y]
    | Resume ([y],k') -> k' () (State [f x y])
    | _               -> error ())
  | _         -> error ()

let unary_operation k f = function
  | State [] -> (match k () empty with
    | State [x]       -> State [f x]
    | Resume ([x],k') -> k' () (State [f x])
    | _               -> error ())
  | _        -> error ()

let rec parse = function
  | "1"::xs   -> perform True; parse xs
  | "0"::xs   -> perform False; parse xs
  | "AND"::xs -> perform And; parse xs
  | "OR"::xs  -> perform Or; parse xs
  | "NOT"::xs -> perform Not; parse xs
  | "("::xs   -> perform L_Br; parse xs
  | ")"::xs   -> perform R_Br; parse xs
  | " "::xs   -> parse xs
  | []        -> false
  | _         -> failwith "Unrecognized symbol"

let parse_handler = handler
  | effect And k   -> binary_operation k (&&)
  | effect Or k    -> binary_operation k (||)
  | effect Not k   -> unary_operation  k (not)
  | effect L_Br k  -> (fun s -> k () empty)
  | effect R_Br k  -> resume k
  | effect True k  -> append k true
  | effect False k -> append k false
  | _              -> (fun s -> s)

let solve str_lst =
  let solver = with parse_handler handle parse str_lst in
  match solver empty with
  | State [x] -> x
  | _         -> false

(* TIME TESTING CODE *)

let rec generate_exp n =
  let rand_exp f g n =
    if n < 33 then f () @ ["AND"] @ g ()
    else if n < 66 then f () @ ["OR"] @ g ()
    else ["NOT"] @ f ()
  in
  let e = perform (Random_int 99) in
  let b1 = perform (Random_int 2) in
  let b2 = perform (Random_int 2) in
  let gen_expr f g = ["("] @ rand_exp f g e @ [")"] in
  match n with
  | 0 -> gen_expr (fun () -> [to_string b1]) (fun () -> [to_string b2])
  | n -> gen_expr (fun () -> generate_exp (n - 1)) (fun () -> generate_exp (n - 1))

let timer f gen n m =
  let rec calc_average_time sum = function
  | 0 -> sum /. (float_of_int m)
  | x ->
    let y = gen n in
    let t0 = perform System_time in
    let _ = f y in
    let diff = (perform System_time -. t0) *. 1000.0 in
    calc_average_time (sum +. diff) (x - 1)
  in
  calc_average_time 0.0 m

let timer_loop f start stop avg step =
  let rec looper i =
    if i <= stop then
      print i; print_string ","; print_endline (timer f generate_exp i avg);
      looper (i + step)
    else print_string "end\n"
  in
  print_string "n,x\n";
  looper start

let _ = timer_loop solve 1 15 10 1
